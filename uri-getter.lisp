(ql:quickload '(:alexandria :split-sequence :drakma :cl-ppcre))

(defparameter *current-directory* (namestring (truename "./")))
(defparameter *download-directory-name* "downloads/")
(defparameter *uri-list-name* "urilist.txt")

(defparameter *uri-list-path* (concatenate 'string *current-directory* *uri-list-name*))
(defparameter *download-directory* (concatenate 'string *current-directory* *download-directory-name*))

(defun download-uri-as-name (url output &key (element-type '(unsigned-byte 8)))
  (multiple-value-bind (body status) (drakma:http-request url :want-stream t :preserve-uri t)
    (with-open-file (out output :direction :output :if-exists :overwrite :if-does-not-exist :create :element-type element-type)
      (print (concatenate 'string (write-to-string status) ":" url))
      (with-open-stream (input body)
        (loop :for b := (read-byte input nil -1)
              :until (minusp b)
              :do (write-byte b out)))
      ))
  )
(defun retrieve-uri-into-filename (uri)
  (let ((name (car (cl-ppcre:all-matches-as-strings "[^/]+$" uri))))
    (let ((filename (cl-ppcre:regex-replace "[#?:].*" name "")))
      (return-from retrieve-uri-into-filename filename)
      )
    )
  )
(defun download-uri (uri dir)
  (ensure-directories-exist dir)
  (let ((name (retrieve-uri-into-filename uri)))
    (download-uri-as-name uri (concatenate 'string dir name))
    ))

(defun download-uri-list (list-path dir)
  (let ((uri-list (cl-ppcre:split "\\s+" (alexandria:read-file-into-string list-path))))
    (mapcar (lambda (x) (download-uri x dir)) uri-list)
    )
  )
(download-uri-list *uri-list-path* *download-directory*)
